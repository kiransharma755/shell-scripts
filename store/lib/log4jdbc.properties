#############################################################
#                                  	                    #
#  log4jdbc customized(iCargo AAT) configuration            #
#                                                           #
#############################################################

# Usage :
# a. Standlone operation (outside j2ee container or sans datasource)
# ------------------------------------------------------------------
#    1. driver class is net.sf.log4jdbc.DriverSpy
#    2. Connection url should be appended with "jdbc:log4" eg (oracle) : jdbc:log4jdbc:oracle:thin:@database_host:database_port:database_name
#
# b. Within a j2ee container as a XA datasource (only Oracle DB supported)
# ---------------------------------------------
#    1. datasource class is net.sf.log4jdbc.OracleXASpyDatasource
#


# One or more fully qualified class names for JDBC drivers that log4jdbc should load and wrap. 
# If more than one driver needs to be specified here, they should be comma separated with no spaces.
# This option is not normally needed because most popular JDBC drivers are already loaded by default
# this should be used if one or more additional JDBC drivers that (log4jdbc doesn't already wrap) needs to be included.
log4jdbc.drivers=oracle.jdbc.OracleDriver

# Set this to false to disable the feature where popular drivers are automatically loaded.
# If this is false, you must set the log4jdbc.drivers property in order to load the driver(s) you want.
log4jdbc.auto.load.popular.drivers=false

# The partial (or full) package prefix for the package name of your application.
# The call stack will be searched down to the first occurrence of a class that has the matching prefix.
# If this is not set, the actual class that called into log4jdbc is used in the debug output (in many cases this will be a connection pool class.)
# For example, setting a system property such as this: -Dlog4jdbc.debug.stack.prefix=com.mycompany.myapp 
# Would cause the call stack to be searched for the first call that came from code in the com.mycompany.myapp package or below,
# thus if all of your sql generating code was in code located in the com.mycompany.myapp package or any subpackages,
# this would be printed in the debug information, rather than the package name for a connection pool, object relational system, etc.
#log4jdbc.debug.stack.prefix

# Logging appenders each of these below are separate appenders which are not additive.

# Only the sql statements
log4jdbc.jdbc.sqlonly=false

# Sql statements with execution time 
log4jdbc.jdbc.sqltiming=true

# All jdbc operations/invocations on the connection
log4jdbc.jdbc.audit=false

# Resultset returned
log4jdbc.jdbc.resultset=false

# Connection open/close lifecycle events
log4jdbc.jdbc.connection=false

# log4jdbc internal logging.
log4jdbc.debug=false


# Millisecond time value. Causes SQL that takes the number of milliseconds specified 
# or more time to execute to be logged at the warning level in the sqltiming log. 
# Note that the sqltiming log must be enabled at the warn log level for this feature to work.
# Also the logged output for this setting will log with debug information that is normally only shown 
# when the sqltiming log is enabled at the debug level. This can help you to more quickly 
# find slower running SQL without adding overhead or logging for normal running SQL that executes 
# below the threshold level (if the logging level is set appropriately.)
log4jdbc.sqltiming.warn.threshold=2000

# Millisecond time value. Causes SQL that takes the number of milliseconds specified
# or more time to execute to be logged at the error level in the sqltiming log.
# Note that the sqltiming log must be enabled at the error log level for this feature to work.
# Also the logged output for this setting will log with debug information that is normally only
# shown when the sqltiming log is enabled at the debug level. This can help you to more quickly 
# find slower running SQL without adding overhead or logging for normal running SQL that executes 
# below the threshold level (if the logging level is set appropriately.)
log4jdbc.sqltiming.error.threshold=4000

# When dumping boolean values in SQL, dump them as 'true' or 'false'.
# If this option is not set, they will be dumped as 1 or 0 as many databases do not have a boolean type, 
# and this allows for more portable sql dumping.
log4jdbc.dump.booleanastruefalse=true

# When dumping SQL, if this is greater than 0, than the dumped SQL will be broken up into lines 
# that are no longer than this value. Set this value to 0 if you don't want log4jdbc to try and
# break the SQL into lines this way. In future versions of log4jdbc, this will probably default to 0.
log4jdbc.dump.sql.maxlinelength=0

# If dumping in debug mode, dump the full stack trace. This will result in EXTREMELY voluminous output,
# but can be very useful under some circumstances when trying to track down the call chain for generated SQL.
log4jdbc.dump.fulldebugstacktrace=false

# Set this to false to suppress SQL select statements in the output.
log4jdbc.dump.sql.select=true

# Set this to false to suppress SQL insert statements in the output.
log4jdbc.dump.sql.insert=true

# Set this to false to suppress SQL update statements in the output.
log4jdbc.dump.sql.update=true

# Set this to false to suppress SQL delete statements in the output.
log4jdbc.dump.sql.delete=true

# Set this to false to suppress SQL create statements in the output.
log4jdbc.dump.sql.create=true

# Set this to true to add an extra semicolon to the end of SQL in the output.
# This can be useful when you want to generate SQL from a program with log4jdbc in order
# to create a script to feed back into a database to run at a later time.
log4jdbc.dump.sql.addsemicolon=false

# Set this to true to display warnings (Why would you care?) in the log when Statements are used in the log. NOTE,
# this was always true in releases previous to 1.2alpha2. It is false by default starting with release 1.2 alpha 2.
log4jdbc.statement.warn=false

# Set this to false to not trim the logged SQL. (Previous versions always trimmed the SQL.)
log4jdbc.trim.sql=true

# Set this to false to not trim extra blank lines in the logged SQL (by default, when more than one blank line in a row occurs,
# the contiguous lines are collapsed to just one blank line.) (Previous versions didn't trim extra blank lines at all.)
log4jdbc.trim.sql.extrablanklines=true

# Set to true to ignore any exception produced by the method, Statement.getGeneratedKeys() (Useful for using log4jdbc with Coldfusion.)
log4jdbc.suppress.generated.keys.exception=false

